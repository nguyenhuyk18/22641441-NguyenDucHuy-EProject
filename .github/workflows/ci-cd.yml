name: CI/CD - Microservices Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ L·∫•y code
      - name: Checkout code
        uses: actions/checkout@v3

              # 2Ô∏è‚É£ C√†i Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'   # d√πng version Node b·∫°n c·∫ßn

      # 2Ô∏è‚É£ Ki·ªÉm tra Docker
      - name: Check Docker version
        run: docker --version

      # 3Ô∏è‚É£ Build t·∫•t c·∫£ Docker image theo docker-compose.yml
      - name: Build Docker images
        run: docker compose -f docker-compose.yml build

      # NEW STEP: ƒê·∫∑t t√™n tag ng·∫Øn g·ªçn cho Image c·ª•c b·ªô.
      # B∆∞·ªõc n√†y ƒë·∫£m b·∫£o t√™n Image c·ª•c b·ªô tr√πng kh·ªõp v·ªõi t√™n trong IMAGES_TO_SAVE.
      - name: Tag Built Images to Simple Names
        run: |
          # C√°c service ƒë∆∞·ª£c x√¢y d·ª±ng t·ª´ docker compose
          SERVICES=("huy_api_gateway" "huy_auth_service" "huy_order_service" "huy_product_service")
          
          for SERVICE in ${SERVICES[@]}; do
            # L·∫•y t√™n image do Docker Compose t·∫°o ra (th∆∞·ªùng l√† t√™n th∆∞ m·ª•c + service name)
            # L·ªánh n√†y d·ª±a v√†o label 'com.docker.compose.service' ƒë·ªÉ t√¨m image
            COMPOSE_IMAGE_NAME=$(docker images --filter "label=com.docker.compose.service=${SERVICE}" --format "{{.Repository}}:{{.Tag}}")
            
            if [ -n "$COMPOSE_IMAGE_NAME" ]; then
              # Tag image v·ª´a t√¨m ƒë∆∞·ª£c b·∫±ng t√™n ng·∫Øn g·ªçn
              echo "Tagging ${COMPOSE_IMAGE_NAME} to ${SERVICE}:latest"
              docker tag "$COMPOSE_IMAGE_NAME" "${SERVICE}:latest"
            else
              echo "üö® L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng t√¨m th·∫•y image cho service ${SERVICE} sau khi build. Vui l√≤ng ki·ªÉm tra l·∫°i file docker-compose.yml v√† t√™n service."
              docker images # In danh s√°ch image ƒë·ªÉ Debug
              exit 1 # D·ª´ng workflow
            fi
          done

      # 4Ô∏è‚É£ L∆ØU IMAGE ƒë√£ build ƒë·ªÉ chuy·ªÉn sang Job "deploys" (Bao g·ªìm Tag 'latest')
      - name: Save Docker Images for Deployment
        run: |
          IMAGES_TO_SAVE="huy_api_gateway:latest huy_auth_service:latest huy_order_service:latest huy_product_service:latest"
          # S·ª≠ d·ª•ng docker save ƒë·ªÉ ƒë√≥ng g√≥i t·∫•t c·∫£ c√°c image c·∫ßn thi·∫øt v√†o m·ªôt file tar
          docker save ${IMAGES_TO_SAVE} -o built_images.tar

      # 5Ô∏è‚É£ UPLOAD file ch·ª©a c√°c Image (S·ª¨ D·ª§NG V4)
      - name: Upload built images artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-microservices-images
          path: built_images.tar
          retention-days: 1 

      - name: Generate .env file for CI
        run: |
          echo "JWT_SECRET=${{ vars.JWT_SECRET }}" >> .env.ci
          echo "MONGODB_PRODUCT_URI=${{ vars.MONGODB_PRODUCT_URI }}" >> .env.ci
          echo "MONGODB_ORDER_URI=${{ vars.MONGODB_ORDER_URI }}" >> .env.ci
          echo "MONGODB_AUTH_URI=${{ vars.MONGODB_AUTH_URI }}" >> .env.ci

      # 6Ô∏è‚É£ Start containers
      - name: Start containers
        run: docker compose --env-file .env.ci -f docker-compose.yml up -d
      
      # ng·ªß 1 ch√∫t ƒë·ªÉ m·∫•y kh·ª©a container ch·∫°y cho xong
      - name: Wait for containers to be ready
        run: sleep 10

      # 5Ô∏è‚É£ Ki·ªÉm tra container ƒëang ch·∫°y
      - name: List running containers
        run: echo "hello ${{ vars.JWT_SECRET }} , ${{ vars.MONGODB_PRODUCT_URI }} , ${{ vars.MONGODB_ORDER_URI }}"

      # 5Ô∏è‚É£ Ki·ªÉm tra container ƒëang ch·∫°y
      - name: List running containers
        run: docker ps

      # 7 Ch·∫°y file test tr√™n product service 
      - name: Run File Test In Product Service
        run: docker exec --env-file .env.ci huy_product_service npm test

      # 6Ô∏è‚É£ D·ª´ng container sau khi test
      - name: Stop containers
        run: docker compose -f docker-compose.yml down

  deploys:
    runs-on: ubuntu-latest
    needs: build-and-run # CH√çNH X√ÅC: Tham chi·∫øu ƒë·∫øn t√™n Job tr√™n.

    steps:
      # 1Ô∏è‚É£ L·∫•y code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # 2Ô∏è‚É£ T·∫¢I XU·ªêNG file ch·ª©a c√°c Image ƒë√£ build t·ª´ Job 1 (S·ª¨ D·ª§NG V4)
      - name: Download built images artifact
        uses: actions/download-artifact@v4
        with:
          name: built-microservices-images
          path: . 

      # 3Ô∏è‚É£ LOAD l·∫°i c√°c Image v√†o Docker daemon c·ªßa Runner n√†y
      - name: Load Docker Images
        run: docker load -i built_images.tar
        
      # 4Ô∏è‚É£ Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5Ô∏è‚É£ Tag v√† Push c√°c Image l√™n Docker Hub
      - name: Tag and Push Images
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}
          TAG: ${{ github.sha }}
        run: |
          SERVICES=("huy_api_gateway" "huy_auth_service" "huy_order_service" "huy_product_service")

          for SERVICE in ${SERVICES[@]}; do
            REPO_NAME=$(echo $SERVICE | cut -d'_' -f2-)

            echo "B·∫Øt ƒë·∫ßu ƒë·∫©y image $SERVICE..."

            # L·ªánh tag n√†y b√¢y gi·ªù ch·∫Øc ch·∫Øn th√†nh c√¥ng v√¨ Job 1 ƒë√£ tag l·∫°i
            # 1. Tag v√† Push b·∫±ng m√£ SHA (L·ªãch s·ª≠)
            docker tag $SERVICE:latest $DOCKER_REPO/$REPO_NAME:$TAG
            docker push $DOCKER_REPO/$REPO_NAME:$TAG

            # 2. Tag v√† Push b·∫±ng tag 'latest' (Phi√™n b·∫£n m·ªõi nh·∫•t)
            docker tag $SERVICE:latest $DOCKER_REPO/$REPO_NAME:latest
            docker push $DOCKER_REPO/$REPO_NAME:latest

            echo "ƒê√£ ho√†n th√†nh $DOCKER_REPO/$REPO_NAME"
          done

          echo "ƒê√£ ho√†n th√†nh vi·ªác ƒë·∫©y t·∫•t c·∫£ images."